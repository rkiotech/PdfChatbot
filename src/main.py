
import os
import sys

from flask import Flask, request
from flask_cors import CORS
import os

app = Flask(__name__)
CORS(app) 
UPLOAD_FOLDER = 'uploads'
os.makedirs(UPLOAD_FOLDER, exist_ok=True)

import json
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))
from SarvamModel import SarvamModel
from langchain_core.output_parsers import PydanticOutputParser
from MmrRetriver import MmrRetriver
from PdfUploader import PdfUploader
from ChromaVectordb import ChromaVectordb
from SementicsimEmbedding import SementicsimEmbedding
from models import Prompt
from pydantic import BaseModel, Field
from PydanticParser import PydanticParser
from DbManager import DbManager
from models.Prompt import Prompt
pd=PdfUploader()
docs=pd.load_file("../doc.pdf")

dbm=DbManager(ChromaVectordb(SementicsimEmbedding(), "sample_collection", "persist_directory"),docs,MmrRetriver())


retriver=dbm.get_retriver()
print("Retriever set successfully")

print("Retrieval completed successfully.")
class AnswerEntities(BaseModel):
    user_input: str=Field(
        description="user input to the model",
    )
    answer: str = Field(
        description="Answer generated by the model",
    )
parser=PydanticOutputParser(pydantic_object=AnswerEntities)
# obj=AnswerEntities(user_input="",answer="")
# print(obj.__class__)
# parser=PydanticParser(parser_obj=obj)

prompt_text = "You will return apropriate  answer if related to context otherwise say dont know ,here is user query {user_input} and here is context {context}"
prompt=Prompt(prompt_text,parser,input_variables=["user_input","context"])

print("Prompt template created successfully.")


model=SarvamModel(api_key="sk_e9hrwjet_SJrtYF4VYTYd474dsVN5Krd4",prompt=prompt)



@app.route('/upload', methods=['POST'])
def upload_file():
    if 'file' not in request.files:
        return "No file part", 400
    
    file = request.files['file']
    
    if file.filename == '':
        return "No selected file", 400
    
    # Save file to uploads folder
    filepath = os.path.join(UPLOAD_FOLDER, file.filename)
    file.save(filepath)
    
    return f"File saved at {filepath}", 200

@app.route('/query', methods=['POST'])
def query_model():  
    data = request.json
    user_input = data.get('user_input', '')
    
    if not user_input:
        return "No user input provided", 400
    
    # Generate response using the model
    response = model.invoke(user_input, retriver=retriver)
    response=response.replace("```json","")
    response=response.replace("```","")
    response=json.loads(response)
    print("Response from the model:", response)
    return {"response": response['answer']}, 200

if __name__ == '__main__':
    app.run(debug=True)
# while True:
#     user_input = input("Enter your query (or 'exit' to quit): ")
#     if user_input.lower() == 'exit':
#         break

#     # Generate response using the model
#     response=model.invoke(user_input, retriver=retriver)
#     # retrieved_docs = retriver.invoke(user_input)
#     # print("Retrieved documents:", retrieved_docs)
#     print("Response from the model:", response)
# # # response=""



# if not response:
#     print("No response generated by the model.")
# else:
#     print("Model response:", response)
# print("Model invocation completed successfully.")