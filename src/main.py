
import os
import sys




sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))
from SarvamModel import SarvamModel

from MmrRetriver import MmrRetriver
from PdfUploader import PdfUploader
from ChromaVectordb import ChromaVectordb
from SementicsimEmbedding import SementicsimEmbedding
from models import Prompt
from pydantic import BaseModel, Field
from PydanticParser import PydanticParser
from DbManager import DbManager
from models.Prompt import Prompt
pd=PdfUploader()
docs=pd.load_file("../doc.pdf")

dbm=DbManager(ChromaVectordb(SementicsimEmbedding(), "sample_collection", "persist_directory"),docs,MmrRetriver())


retriver=dbm.get_retriver()
print("Retriever set successfully")


# query = "What is the main topic of the document?"
# retrieved_docs = retriver.invoke(query)
# print("Retrieved documents:", retrieved_docs)
# if not retrieved_docs:
#     print("No documents retrieved for the query.")
# else:
#     for doc in retrieved_docs:
#         print("Document:", doc.page_content)
#         print("Metadata:", doc.metadata)
print("Retrieval completed successfully.")
class AnswerEntities(BaseModel):
    user_input: str=Field(
        description="user input to the model",
    )
    answer: str = Field(
        description="Answer generated by the model",
    )

obj=AnswerEntities(user_input="",answer="")
# print(obj.__class__)
parser=PydanticParser(parser_obj=obj)

prompt_text = "You will return apropriate  answer if related to context otherwise say dont know ,here is user query {user_input} and here is context {context}"
prompt=Prompt(prompt_text,parser,input_variables=["user_input","context"])

print("Prompt template created successfully.")
# query = "Where is education taken as mentioned in the document?"

model=SarvamModel(api_key="sk_e9hrwjet_SJrtYF4VYTYd474dsVN5Krd4",prompt=prompt)

while True:
    user_input = input("Enter your query (or 'exit' to quit): ")
    if user_input.lower() == 'exit':
        break

    # Generate response using the model
    response=model.invoke(user_input, retriver=retriver)
    # retrieved_docs = retriver.invoke(user_input)
    # print("Retrieved documents:", retrieved_docs)
    print("Response from the model:", response)
# response=""



if not response:
    print("No response generated by the model.")
else:
    print("Model response:", response)
print("Model invocation completed successfully.")